#此文件，是放在配置中心中
debug: true
logging:
  level:
    ROOT: 'INFO'  # 可选项 OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL
    com.alibaba.nacos: "INFO"
    org.springframework.cloud: 'DEBUG'
    com.javafree.cloud: 'DEBUG'
  config: classpath:logback-spring.xml

server:
  port: 7070 #启动端口

spring:
  application:
    name: javafree-cloud-admin
    thymeleaf:
      cache: false
  datasource:
    #com.mysql.jdbc.Driver和mysql-connector-java 5用。
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/javafree8?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password: root
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 5 #初始连接数
      max-active: 10 #最大活动连接
      max-wait: 60000 #从池中取连接(没有闲置连接)的最大等待时间,-1表示无限等待
      min-idle: 5 #最小闲置数,小于min-idle连接池会主动创建新的连接
      time-between-eviction-runs-millis: 60000 #清理线程启动的间隔时间,当线程池中没有可用的连接启动清理线程
      min-evictable-idle-time-millis: 300000 #清理线程保持闲置最小时间
      validation-query: SELECT 1  #用于校验连接
      test-on-borrow: false #请求连接时是否校验,比较消耗性能,一般设置false
      test-on-return: false #归还连接时是否校验,比较消耗性能,一般设置false
      test-while-idle: true #清理线程通过validation-query来校验连接是否正常,如果不正常将从连接池中移除
      pool-prepared-statements: true #存储相同逻辑的sql到连接池的缓存中
      #      filters: stat,wall #监控统计web的statement(sql),以及防sql注入的wall
      # 关闭如上配置,可以采用自定义的filter
      filter:
        stat:
          enabled: true #状态监控-->stat
          db-type: mysql
          log-slow-sql: true  #记录超过指定时间的sql到日志中
          slow-sql-millis: 2000
        wall:
          enabled: true #防火墙-->wall
          db-type: mysql
          config:
            delete-allow: true #false禁止删除
            drop-table-allow: false #禁止删除表
            case-condition-const-allow: true #解决1=1报错
      web-stat-filter:
        enabled: true #开启监控uri,默认false
        url-pattern: /* #添加过滤规则
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid" #忽略过滤
      stat-view-servlet:
        enabled: true #开启视图管理界面,默认false
        url-pattern: /druid/* #视图管理界面uri
        login-username: druid #账号
        login-password: 123456 #密码
  #        allow: 127.0.0.1 白名单
  #        deny:  192.168.1.130黑名单
  jpa:
    show-sql: true # 默认false，在日志里显示执行的sql语句
    hibernate:
      ddl-auto: none #指定为update，每次启动项目检测表结构有变化的时候会新增字段，表不存在时会新建，如果指定create，则每次启动项目都会清空数据并删除表，再新建
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        # naming_strategy: org.hibernate.cfg.ImprovedNamingStrategy
    open-in-view: off  #尽快释放数据库连接资源，不支持jpa的懒加载

  #设置jackson返回时间格式及时区
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss # 日期时间格式
    time-zone: Asia/Shanghai #将GMT+8  北京时区 换为Asia/Shanghai
    default-property-inclusion: ALWAYS  # non_null # 属性不为空

  cloud:
    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
        namespace: dev # 服务分组

# springdoc swagger配置
springdoc:
  version: '@javafree admin api 1.0@'
  swagger-ui:
  # 开启Swagger UI界面
    enabled: true
  api-docs:
   # 修改api-docs路径
    path: /v3/api-docs
    # 开启api-docs
    enabled: true
  # 配置需要生成接口文档的扫描包
  packages-to-scan: com.javafree.cloud.admin.restapi


  # redis 相关配置
  redis:
    # 连接超时时间（毫秒）
    timeout: 1200
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器地址 ${HOST:localhost}
    host: 127.0.0.1
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password: 123456
    ssl: false
    #lettuce 连接池配置，基于netty nio 如果让lettuce池生效需要引入 commons-pool2
    lettuce:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 0
        # 连接池最大阻塞等待时间（使用负值表示没有限制）,缺省值-1
        max-wait: 30s

  # spring boot cache  相关配置
  cache:
    type: redis

    # JavafreeMultilevel 二级缓存工具包参数配置
    multilevel:
      #  Redis缓存时间配置
      time-to-live: 1h
      #缓存key是否加前缀.
      use-key-prefix: true
      #缓存key的前缀 当use-key-prefix为true时有效
      key-prefix: "javafreekey:"
      # 缓存更新时通知其他节点的 redis消息主题名称
      topic: "cache:multilevel:topic"
      #是否存储空值，默认true，防止缓存穿透
      allow-null-values: true
      # 本地 Caffeine缓存配置
      local:
        #最大缓存对象个数，超过此数量时之前放入的缓存将失效
        max-size: 2000
        #  初始的缓存空间大小
        initial-capacity : 1000
        #caffein缓存过期算法配置
        #缓存失效模式 有WRITE、ACCESS和RANDOM三种，默认RANDOM
        # RANDOM 对象expireAfter 允许复杂的表达式，过期时间可以通过自定义的随机算法获得
        # ACCESS对应expireAfterAccess 表示上次读写超过一定时间后过期，
        # WRITE对应expireAfterWrite 表示上次创建或更新超过一定时间后过期
        expire-mode: RANDOM
        #最后一次写入或访问后经过固定时间过期，对应ACCESS
        expire-after-access: 1800s
        # 最后一次写入后经过固定时间过期，对应WRITE
        expire-after-write: 1800s
        #本地缓存条目过期的时间偏差百分比，对应RANDOM
        expiry-jitter: 50
      # Redis异常处理，Resilience4j 断路器配置
      circuit-breaker:
        # 禁止进一步调用 Redis 的调用失败百分比
        failure-rate-threshold: 25
        # 禁止进一步调用 Redis 的慢速调用百分比
        slow-call-rate-threshold: 25
        #定义 Redis 调用被认为是慢的持续时间  单位毫秒
        slow-call-duration-threshold: 250ms
        # 用于连通性分析的滑动窗口类型 两种，基于时间（time_based）和记数的（count_based）
        sliding-window-type: count_based
        #用于测试断路器关闭时后端是否响应的 Redis 调用量
        permitted-number-of-calls-in-half-open-state: 20
        #在关闭断路器之前等待的时间量，
        max-wait-duration-in-half-open-state: 5s
        # Redis调用分析的滑动窗口大小（调用/秒）
        sliding-window-size: 40
        #在计算错误或慢速调用率之前所需的最小调用次数
        minimum-number-of-calls: 10
        #在允许 Redis 调用测试后端连接之前需要等待时间。
        wait-duration-in-open-state: 2500ms
